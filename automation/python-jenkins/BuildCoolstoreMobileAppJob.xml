<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.10">
  <actions/>
  <description>Pipeline for configuring and building Coolstore Mobile App.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@0.1.24">
      <uid></uid>
      <namespace></namespace>
      <name></name>
      <resourceVersion></resourceVersion>
    </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>COOLSTORE_GATEWAY_URL</name>
          <description>URL for Gateway for Coolstore application. Example: http://coolstore-gw-coolstore.openshiftdomain.com</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DIGGER_JENKINS_URL</name>
          <description>Aerogear Digger Jenkins URL, example: http://jenkins-aerogear-digger.youropenshiftdomain.com</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DIGGER_JENKINS_USER</name>
          <description>User for Aerogear Digger Jenkins.  If you deployed Aerogear Digger using &apos;Deploy Aerogear Digger&apos; or you used https://github.com/aerogear/aerogear-digger-installer, the username should be &apos;admin&apos;</description>
          <defaultValue>admin</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>DIGGER_JENKINS_PASSWORD</name>
          <description>Password for Aerogear Digger Jenkins user. If you deployed Aerogear Digger using &apos;Deploy Aerogear Digger&apos; or you used https://github.com/aerogear/aerogear-digger-installer, the password should be just &apos;password&apos;</description>
          <defaultValue>{AQAAABAAAABAxNzqe7PTTBeFYq2ZsheN2L0sJStOd5UWpk0ja8n8813v8ZH1E6vgoL/8D1VPW9SzhO54btoepLLsaBUBeQ525LooELJqhNuuUFYryx7bDEQ=}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COOLSTORE_MOBILE_APP_GITHUB_URL</name>
          <description>GitHub URL for Coolstore Mobile App</description>
          <defaultValue>https://github.com/trepel/coolstore-ionic1-example-app.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COOLSTORE_MOBILE_APP_BRANCH</name>
          <description>Branch of Coolstore Mobile App to be used</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.30">
    <script>import java.util.regex.Pattern
import java.util.regex.Matcher

try {
    timeout(time: 60, unit: &apos;MINUTES&apos;) {
        
        String buildNumber = null
        
        def nodeJsSlaveContainer = containerTemplate(
            name: &apos;jnlp&apos;,
            image: &apos;registry.access.redhat.com/openshift3/jenkins-slave-nodejs-rhel7&apos;,
            args: &apos;${computer.jnlpmac} ${computer.name}&apos;,
            ttyEnabled: false
        )

        podTemplate(label: &apos;nodejs-slave&apos;, cloud: &quot;openshift&quot;, containers: [nodeJsSlaveContainer]) {
        node (&quot;nodejs-slave&quot;) {

            stage(&quot;Clone Coolstore Mobile Ionic1 App&quot;) {
                dir (&apos;coolstore-ionic1-example-app&apos;) {
                    git branch: COOLSTORE_MOBILE_APP_BRANCH, url: COOLSTORE_MOBILE_APP_GITHUB_URL
                    if (!fileExists (file: &apos;./www/js/config.json&apos;)) error(&quot;Error cloning coolstore-ionic1-example-app&quot;)
                }
            }
            
            stage(&quot;Create Job on Digger and add Coolstore Gateway URL parameter&quot;) {
                
                // Create job
                sh &apos;&apos;&apos;
                    npm install -g aerogear-digger-node-client
                    digger login $DIGGER_JENKINS_URL $DIGGER_JENKINS_USER $DIGGER_JENKINS_PASSWORD
                    digger job create coolstore-ionic1-example-app $COOLSTORE_MOBILE_APP_GITHUB_URL $COOLSTORE_MOBILE_APP_BRANCH
                &apos;&apos;&apos;
                
                // Add Coolstore Gateway parameter with default value from parameter of this job
                sh &apos;&apos;&apos;
                    curl -X GET -u $DIGGER_JENKINS_USER:$DIGGER_JENKINS_PASSWORD $DIGGER_JENKINS_URL/job/coolstore-ionic1-example-app/config.xml -o config.xml
                &apos;&apos;&apos;
                config = readFile encoding: &apos;UTF-8&apos;, file: &apos;./config.xml&apos;
                config = config.replaceFirst(&apos;&lt;/properties&gt;&apos;,
                &apos;&lt;hudson.model.ParametersDefinitionProperty&gt;\n&lt;parameterDefinitions&gt;\n&lt;hudson.model.StringParameterDefinition&gt;\n&lt;name&gt;COOLSTORE_GATEWAY_URL&lt;/name&gt;\n&lt;description&gt;URL for Coolstore Gateway&lt;/description&gt;\n&lt;defaultValue&gt;&apos; + COOLSTORE_GATEWAY_URL + &apos;&lt;/defaultValue&gt;\n&lt;/hudson.model.StringParameterDefinition&gt;\n&lt;/parameterDefinitions&gt;\n&lt;/hudson.model.ParametersDefinitionProperty&gt;\n&lt;/properties&gt;&apos;)
                writeFile encoding: &apos;UTF-8&apos;, file: &apos;config.xml&apos;, text: config
                sh &apos;&apos;&apos;
                curl -X POST -u $DIGGER_JENKINS_USER:$DIGGER_JENKINS_PASSWORD $DIGGER_JENKINS_URL/job/coolstore-ionic1-example-app/config.xml --data-binary @config.xml
                &apos;&apos;&apos;
            }

            stage(&quot;Build Mobile Application&quot;) {
                sh &apos;&apos;&apos;
                curl -X POST -u $DIGGER_JENKINS_USER:$DIGGER_JENKINS_PASSWORD $DIGGER_JENKINS_URL/job/coolstore-ionic1-example-app/buildWithParameters --data-urlencode json=&apos;{}&apos;
                &apos;&apos;&apos;
                
                println &apos;Sleeping for 10 seconds so that the job build can start and build number is available for retrieval&apos;
                sleep 10
                
                buildNumber = sh returnStdout: true, script: &apos;curl -X GET -u $DIGGER_JENKINS_USER:$DIGGER_JENKINS_PASSWORD $DIGGER_JENKINS_URL/job/coolstore-ionic1-example-app/lastBuild/buildNumber&apos;
                
                println buildNumber
            }
            
            stage(&quot;Wait Till Job Finishes&quot;) {
                String output = null
                String log = null
                waitUntil {
                    log = sh returnStdout: true, script: &apos;digger log coolstore-ionic1-example-app &apos; + buildNumber
                    output = sh returnStdout: true, script: &apos;digger artifact coolstore-ionic1-example-app &apos; + buildNumber
                    if (output.contains(&quot;Build artifacts:&quot;)) return true
                    
                    if (log.contains(&quot;Finished streaming logs&quot;)) {
                        error(&quot;Build failed because triggered Digger build failed&quot;)
                    }
                }
                
                output = output.replaceAll(&apos;^.*?\n&apos;, &apos;&apos;)
                output = output.replaceAll(&apos;://&apos;, &apos;://&apos;+ DIGGER_JENKINS_USER + &apos;:&apos; + DIGGER_JENKINS_PASSWORD + &apos;@&apos;)
                println output
                
                env.BUILT_APP_URL = output
                
                sh &apos;&apos;&apos;
                    curl $BUILT_APP_URL --output coolstore-mobile-app.apk
                &apos;&apos;&apos;
                
            }
            
            stage(&quot;Archive Built Mobile App&quot;) {
                archiveArtifacts artifacts: &apos;coolstore-mobile-app.apk&apos;, onlyIfSuccessful: true
            }
        } // node
        } // podTemplate
    }
} catch(err) {
    echo &quot;Caught ${err}&quot;
    currentBuild.result = &apos;FAILURE&apos;
    throw err
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
</flow-definition>
