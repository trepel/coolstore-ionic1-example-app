<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.10">
  <actions/>
  <description>Pipeline for configuring and building Coolstore Mobile App.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@0.1.24">
      <uid></uid>
      <namespace></namespace>
      <name></name>
      <resourceVersion></resourceVersion>
    </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>COOLSTORE_GATEWAY_URL</name>
          <description>URL for Gateway for Coolstore application. Example: http://coolstore-gw-coolstore.openshiftdomain.com</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DIGGER_JENKINS_URL</name>
          <description>Aerogear Digger Jenkins URL, example: http://jenkins-aerogear-digger.youropenshiftdomain.com</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DIGGER_JENKINS_USER</name>
          <description>User for Aerogear Digger Jenkins.  If you deployed Aerogear Digger using &apos;Deploy Aerogear Digger&apos; or you used https://github.com/aerogear/aerogear-digger-installer, the username should be &apos;admin&apos;</description>
          <defaultValue>admin</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>DIGGER_JENKINS_PASSWORD</name>
          <description>Password for Aerogear Digger Jenkins user. If you deployed Aerogear Digger using &apos;Deploy Aerogear Digger&apos; or you used https://github.com/aerogear/aerogear-digger-installer, the password should be just &apos;password&apos;</description>
          <defaultValue>{AQAAABAAAAAQfjer+aaFzopWVL2p/BcLw3xqsZVqvJgd3nIjYdkpyMw=}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COOLSTORE_MOBILE_APP_GITHUB_URL</name>
          <description>GitHub URL for Coolstore Mobile App</description>
          <defaultValue>https://github.com/trepel/coolstore-ionic1-example-app.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COOLSTORE_MOBILE_APP_BRANCH</name>
          <description>Branch of Coolstore Mobile App to be used</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COOLSTORE_MOBILE_APP_NEW_BRANCH</name>
          <description>In this branch the URL for Coolstore gateway will be configured and stored. Consequently this branch will be used for building the mobile app. If the branch already exists the configuration update is skipped and the branch is used as is</description>
          <defaultValue>config-update</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GITHUB_USERNAME</name>
          <description>Github Username to be used for pushing the mobile app configuration change.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>GITHUB_TOKEN</name>
          <description>Github Personal Access Token - read/write to public repositories is enough (public_repo)</description>
          <defaultValue>{AQAAABAAAAAQ+5aJKxB+gsISjXIv97f7fgRsRO8V2PnabeuLvp3vdtY=}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.30">
    <script>import java.util.regex.Pattern
import java.util.regex.Matcher

try {
    timeout(time: 60, unit: &apos;MINUTES&apos;) {
        
        String buildNumber = null
        
        def nodeJsSlaveContainer = containerTemplate(
            name: &apos;jnlp&apos;,
            image: &apos;registry.access.redhat.com/openshift3/jenkins-slave-nodejs-rhel7&apos;,
            args: &apos;${computer.jnlpmac} ${computer.name}&apos;,
            ttyEnabled: false
        )

        podTemplate(label: &apos;nodejs-slave&apos;, cloud: &quot;openshift&quot;, containers: [nodeJsSlaveContainer]) {
        node (&quot;nodejs-slave&quot;) {

            stage(&quot;Clone Coolstore Mobile Ionic1 App&quot;) {
                dir (&apos;coolstore-ionic1-example-app&apos;) {
                    git branch: COOLSTORE_MOBILE_APP_BRANCH, url: COOLSTORE_MOBILE_APP_GITHUB_URL
                    if (!fileExists (file: &apos;./www/js/config.json&apos;)) error(&quot;Error cloning coolstore-ionic1-example-app&quot;)
                }
            }
            
            stage(&quot;Configure Coolstore Mobile Ionic1 App&quot;) {
                
                dir (&apos;coolstore-ionic1-example-app&apos;) {
                    String output = sh returnStdout: true, script: &quot;git branch -a&quot;
                    println output
                    
                    if(!output.contains(&quot;origin/$COOLSTORE_MOBILE_APP_NEW_BRANCH&quot;)) {
                        String config = &apos;{ &quot;gateway_backend_url&quot;: &quot;&apos; + COOLSTORE_GATEWAY_URL + &apos;&quot;, &quot;webui_backend_url&quot; : &quot;&apos; + COOLSTORE_GATEWAY_URL.replaceAll(&apos;coolstore-gw-&apos;, &apos;web-ui-&apos;) + &apos;&quot; }&apos;
                        println config
                        writeFile encoding: &apos;UTF-8&apos;, file: &apos;./www/js/config.json&apos;, text: config
                        
                        String githubUrl = COOLSTORE_MOBILE_APP_GITHUB_URL;
                        githubUrl = githubUrl.replace(&apos;https://&apos;, &apos;&apos;)
                        env.githubUrl = githubUrl
    
                        sh &apos;&apos;&apos;
                            git config user.name $GITHUB_USERNAME
                            git config user.email $GITHUB_USERNAME@redhat.com
                            git checkout -b $COOLSTORE_MOBILE_APP_NEW_BRANCH
                            git add -u
                            git commit -m &quot;Updated backend URL configuration&quot;
                            git push https://$GITHUB_USERNAME:$GITHUB_TOKEN@$githubUrl $COOLSTORE_MOBILE_APP_NEW_BRANCH
                        &apos;&apos;&apos;
                    } else {
                        println &quot;The branch &apos;$COOLSTORE_MOBILE_APP_NEW_BRANCH&apos; already exists, it will be used as is&quot;
                    }
                }
            }
            
            stage(&quot;Create Job on Digger&quot;) {
                sh &apos;&apos;&apos;
                    npm install -g aerogear-digger-node-client
                    digger login $DIGGER_JENKINS_URL $DIGGER_JENKINS_USER $DIGGER_JENKINS_PASSWORD
                    digger job create coolstore-ionic1-example-app $COOLSTORE_MOBILE_APP_GITHUB_URL $COOLSTORE_MOBILE_APP_NEW_BRANCH
                &apos;&apos;&apos;
            }
            
            stage(&quot;Build Mobile Application&quot;) {
                String output = sh returnStdout: true, script: &apos;digger job build coolstore-ionic1-example-app&apos;
                Matcher m = Pattern.compile(/ ([0-9]+)&apos;/).matcher(output)
                if (m.getCount() == 0) error(&apos;Cannot find Build Number in &quot;&apos; + output + &apos;&quot;&apos;)
                buildNumber = m[0][1]
                // needed due to serialization requirement
                m = null
                println buildNumber
            }
            
            stage(&quot;Wait Till Job Finishes&quot;) {
                String output = null
                waitUntil {
                    output = sh returnStdout: true, script: &apos;digger artifact coolstore-ionic1-example-app &apos; + buildNumber
                    return output.contains(&quot;Build artifacts:&quot;)
                }
                
                output = output.replaceAll(&apos;^.*?\n&apos;, &apos;&apos;)
                output = output.replaceAll(&apos;://&apos;, &apos;://&apos;+ DIGGER_JENKINS_USER + &apos;:&apos; + DIGGER_JENKINS_PASSWORD + &apos;@&apos;)
                println output
                
                env.BUILT_APP_URL = output
                
                sh &apos;&apos;&apos;
                    curl $BUILT_APP_URL --output coolstore-mobile-app.apk
                &apos;&apos;&apos;
                
            }
            
            stage(&quot;Archive Built Mobile App&quot;) {
                archiveArtifacts artifacts: &apos;coolstore-mobile-app.apk&apos;, onlyIfSuccessful: true
            }
        } // node
        } // podTemplate
    }
} catch(err) {
    echo &quot;Caught ${err}&quot;
    currentBuild.result = &apos;FAILURE&apos;
    throw err
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
</flow-definition>
